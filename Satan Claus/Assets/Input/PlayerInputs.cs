//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Playing"",
            ""id"": ""af2cbf55-412a-4123-b5de-3fa27f3f48d9"",
            ""actions"": [
                {
                    ""name"": ""LeftHandMove"",
                    ""type"": ""Value"",
                    ""id"": ""86fd523e-305e-480f-adfb-2221ea637a77"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""03b22afd-723b-4bf7-864c-5bd6888e9b83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightHandMove"",
                    ""type"": ""Button"",
                    ""id"": ""d24bffec-fb62-4e1a-b820-3517a7823a62"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""17a86223-43c5-4dd7-8d39-3b60fca2087c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ecd0632b-54eb-4bc6-a0da-7e61efa4b2a1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f8e62978-0589-4d98-af9e-2ef150ad3fd5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d0708997-3601-443c-8f10-9eded0a339ce"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""401beb3d-c5ca-4f8d-99bf-c734f545b832"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""112dbc41-868d-4175-8927-4e56865d51ae"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHandMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b520acd2-203c-401e-a509-a85c5c3465c8"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Paused"",
            ""id"": ""1c49296b-6cfe-46a7-9361-5beb930031ef"",
            ""actions"": [
                {
                    ""name"": ""pause"",
                    ""type"": ""Button"",
                    ""id"": ""54b20b5c-80d8-4f1c-9787-5dfcdabcae6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f69f6e27-b544-4a04-a998-d5de5595ee59"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Playing
        m_Playing = asset.FindActionMap("Playing", throwIfNotFound: true);
        m_Playing_LeftHandMove = m_Playing.FindAction("LeftHandMove", throwIfNotFound: true);
        m_Playing_Interact = m_Playing.FindAction("Interact", throwIfNotFound: true);
        m_Playing_RightHandMove = m_Playing.FindAction("RightHandMove", throwIfNotFound: true);
        m_Playing_Pause = m_Playing.FindAction("Pause", throwIfNotFound: true);
        // Paused
        m_Paused = asset.FindActionMap("Paused", throwIfNotFound: true);
        m_Paused_pause = m_Paused.FindAction("pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Playing
    private readonly InputActionMap m_Playing;
    private List<IPlayingActions> m_PlayingActionsCallbackInterfaces = new List<IPlayingActions>();
    private readonly InputAction m_Playing_LeftHandMove;
    private readonly InputAction m_Playing_Interact;
    private readonly InputAction m_Playing_RightHandMove;
    private readonly InputAction m_Playing_Pause;
    public struct PlayingActions
    {
        private @PlayerInputs m_Wrapper;
        public PlayingActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftHandMove => m_Wrapper.m_Playing_LeftHandMove;
        public InputAction @Interact => m_Wrapper.m_Playing_Interact;
        public InputAction @RightHandMove => m_Wrapper.m_Playing_RightHandMove;
        public InputAction @Pause => m_Wrapper.m_Playing_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Playing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayingActions set) { return set.Get(); }
        public void AddCallbacks(IPlayingActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayingActionsCallbackInterfaces.Add(instance);
            @LeftHandMove.started += instance.OnLeftHandMove;
            @LeftHandMove.performed += instance.OnLeftHandMove;
            @LeftHandMove.canceled += instance.OnLeftHandMove;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @RightHandMove.started += instance.OnRightHandMove;
            @RightHandMove.performed += instance.OnRightHandMove;
            @RightHandMove.canceled += instance.OnRightHandMove;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IPlayingActions instance)
        {
            @LeftHandMove.started -= instance.OnLeftHandMove;
            @LeftHandMove.performed -= instance.OnLeftHandMove;
            @LeftHandMove.canceled -= instance.OnLeftHandMove;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @RightHandMove.started -= instance.OnRightHandMove;
            @RightHandMove.performed -= instance.OnRightHandMove;
            @RightHandMove.canceled -= instance.OnRightHandMove;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IPlayingActions instance)
        {
            if (m_Wrapper.m_PlayingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayingActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayingActions @Playing => new PlayingActions(this);

    // Paused
    private readonly InputActionMap m_Paused;
    private List<IPausedActions> m_PausedActionsCallbackInterfaces = new List<IPausedActions>();
    private readonly InputAction m_Paused_pause;
    public struct PausedActions
    {
        private @PlayerInputs m_Wrapper;
        public PausedActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @pause => m_Wrapper.m_Paused_pause;
        public InputActionMap Get() { return m_Wrapper.m_Paused; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PausedActions set) { return set.Get(); }
        public void AddCallbacks(IPausedActions instance)
        {
            if (instance == null || m_Wrapper.m_PausedActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PausedActionsCallbackInterfaces.Add(instance);
            @pause.started += instance.OnPause;
            @pause.performed += instance.OnPause;
            @pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IPausedActions instance)
        {
            @pause.started -= instance.OnPause;
            @pause.performed -= instance.OnPause;
            @pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IPausedActions instance)
        {
            if (m_Wrapper.m_PausedActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPausedActions instance)
        {
            foreach (var item in m_Wrapper.m_PausedActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PausedActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PausedActions @Paused => new PausedActions(this);
    public interface IPlayingActions
    {
        void OnLeftHandMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnRightHandMove(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IPausedActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
}
